<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js中的一些简写操作]]></title>
    <url>%2F2019%2F02%2F03%2Fjs%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%86%99%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[自从这个博客搭建完，写了一篇怎么搭建hexo后，就再也没动过了，主要是不知道该写点什么（大概是自己的技能掌握的不够全面和深入，没有什么可以拿出来写写的）。这篇就把工作中常常用到的一些js的简写方法记录一下吧，有些简写可以大大提高代码的简洁性，不过也会造成因为某些维护者不知道这种语法导致的维护困难。 快速给变量赋默认值let fun = (param) =&gt; &#123; param = param || 5; console.log(param);&#125;fun(); // -&gt; 5// 等同于let fun = (param) =&gt; &#123; if(param === undefined) &#123; param = 5; &#125; console.log(param);&#125;fun(); // -&gt; 5 param = param || 5;在这里的作用相当于将param这个参数的默认值设置成5（这种说法不太严谨）在js中，undefined、null、数字0、NaN、空字符串&quot;&quot;等会隐式转换成false，相当于undefined==false，所以在||左边为false时，就会取它右边的值。在es6中，新增了函数参数默认值的写法，如下： let fun = (param=5) =&gt; &#123; console.log(param);&#125;fun(); // -&gt; 5fun(1); // -&gt; 1fun(0); // -&gt; 0fun(undefined); // -&gt; 5fun(false); // -&gt; false只有在参数为undefined的时候才会是默认值 if判断简写typeof fun === 'function' &amp;&amp; fun();// 等同于if(typeof fun === 'function') &#123; fun();&#125; &amp;&amp;操作需要左边的为true，才会执行右边的语句。 判断非空if(!data) &#123; ...&#125;// 等同于if(data === undefined || data === null || data === 0 || data === false || data === NaN || data === "") &#123; ...&#125; 详见第一条，隐式类型转换。 快速转成布尔值let a = 0;console.log(!!a); -&gt; falsea = null;console.log(!!a); -&gt; falsea = "abc";console.log(!!a); -&gt; truea = function() &#123;&#125;;console.log(!!a); -&gt; true !为取反操作，!!负负得正。 深拷贝let data = JSON.parse(JSON.stringify(res)); 快速取当前时间戳let timestamp = +new Date(); // -&gt; 1549179377368// 等同于let timestamp = new Date().valueOf(); 写下来怎么好像都是隐式类型转换的东西。。。说明要正确理解==和===呐。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一下第一次搭Hexo]]></title>
    <url>%2F2018%2F09%2F11%2FHexo%2F</url>
    <content type="text"><![CDATA[闲来无事，终于着手搭建自己的第一个博客了（其实很久前就想弄的，一直拖到现在…）。搜了一圈，还是Hexo简单点。第一篇就记一下搭建过程吧（其实是根本没想好有什么好写的）。分两篇，这一篇介绍下Hexo的搭建 先丢两个官方文档HexoNexT 前期准备环境 前端嘛，都懂的，node和npm少不了，去官网下就可以了。如果你先npm安装node_modules包的时候太慢，可以用cnpm。 git必备，官网，Git bash也是个好东西。 github 注册登录就不说了…在github新建一个[你的github用户名].github.io的项目，注意，一定要是你的github用户名，新建后，要过一段时间才能生效，可以直接访问https://[你的github用户名].github.io 开始搭建安装1$ npm install -g hexo-cli 或1$ cnpm install -g hexo-cli ps: 顺便说一句代码块的问题，比如我开启了代码块行号显示，但是某些代码块又不想显示行号，可以使用类似下面的写法，必须要用codeblock标签才行，用反引号好像不行，主要是line_number:false，这个官网文档上没有，我找了下源码才看到的：123&#123;% codeblock line_number:false %&#125;alert(&apos;Hello World!&apos;);&#123;% endcodeblock %&#125; 新建Hexo项目进入一个硬盘区域，执行命令123$ hexo init &lt;project name&gt;$ cd &lt;project name&gt;$ npm install 第一个命令：初始化一个hexo项目，&lt;project name&gt;就是项目名称，可以自己取第二个命令：进入刚初始化完成的项目文件夹第三个命令：安装项目依赖 新建完成后，目录如下.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 个性化配置Hexo分为两种配置，一个是项目配置，对应项目根目录下的_config.yml文件；一个是主题配置，对应themes/your_theme下的_config.yml文件。这里先说说常用的项目配置。 YMAL语法首先简单了解下YAML的语法，如下，参考 favicon: small: /images/favicon-16x16-next.png #ms_browserconfig: /images/browserconfig.xmlkeywords: "Hexo, NexT"# Set rss to specific value if you have burned your feed already.rss: false 大小写敏感 使用缩进表示层级关系 禁止使用tab缩进，只能使用空格键 缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级 使用#表示注释 字符串可以不用引号标注 冒号后面要加一个空格 常用配置网站相关配置 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述，可用来SEO优化 keywords 网站关键词，可用来SEO优化 author 作者 language 网站语言 主题1theme: next # 默认landscape 分页相关1per_page: 10 # 每页显示的文章量 (0 = 关闭分页功能) 发布相关deploy: type: git # 如果要用github.io做主页的话配置为 [你的github用户名].github.io的项目地址 repository: https://github.com/xxx/xxx.github.io branch: master 启动本地服务$ hexo server 可简写为 hexo s，启动后浏览器中打开http:localhost:4000就可以看到页面了 发布$ hexo deploy 可简写为 hexo d]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
